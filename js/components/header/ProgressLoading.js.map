{"version":3,"sources":["../../../src/components/header/ProgressLoading.jsx"],"names":["Colors","LOADING","FAILED","Component","ProgressLoading","props","_onStore","store","fetching","getState","setState","completed","color","SUCCESS","state","unsubscribe","subscribe"],"mappings":";;;;;;;;AACA;;;;AAEA;;AACA;;;;;;;;;;+eAJA;;;AAMA,IAAMA,SAAS;AACbC,WAAU,SADG;AAEbC,UAAS;AAFI,CAAf;;IAKQC,S,mBAAAA,S;;IAEFC,e;;;AAEJ,2BAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAAA,UAgBlBC,QAhBkB,GAgBP,YAAM;AAAA,UACPC,KADO,GACG,MAAKF,KADR,CACPE,KADO;;AAEf,UAAMC,WAAWD,MAAME,QAAN,GAAiBD,QAAlC;AACA,UAAI,MAAKA,QAAL,KAAkBA,QAAtB,EAA+B;AAC7B,cAAKA,QAAL,GAAgBA,QAAhB;AACA,gBAAOA,QAAP;AACE,eAAK,iBAAMP,OAAX;AACE,kBAAKS,QAAL,CAAc,EAAEC,WAAW,EAAb,EAAiBC,OAAOZ,OAAOC,OAA/B,EAAd;AACA;AACF,eAAK,iBAAMY,OAAX;AACE,kBAAKH,QAAL,CAAc,EAAEC,WAAW,GAAb,EAAkBC,OAAOZ,OAAOC,OAAhC,EAAd;AACA;AACF,eAAK,iBAAMC,MAAX;AACE,kBAAKQ,QAAL,CAAc,EAACC,WAAW,GAAZ,EAAiBC,OAAOZ,OAAOE,MAA/B,EAAd;AACA;AACF;AAAU;AAVZ;AAYD;AACF,KAlCiB;;AAEhB,UAAKM,QAAL,GAAgBH,MAAME,KAAN,CAAYE,QAAZ,GAAuBD,QAAvC;AACA,UAAKM,KAAL,GAAa;AACXH,iBAAY,CADD;AAEXC,aAAQZ,OAAOC;AAFJ,KAAb;AAHgB;AAOjB;;;;wCAEkB;AACjB,WAAKc,WAAL,GAAmB,KAAKV,KAAL,CAAWE,KAAX,CAAiBS,SAAjB,CAA2B,KAAKV,QAAhC,CAAnB;AACD;;;2CACqB;AACpB,WAAKS,WAAL;AACD;;;6BAsBO;AAAA,mBACuB,KAAKD,KAD5B;AAAA,UACEH,SADF,UACEA,SADF;AAAA,UACaC,KADb,UACaA,KADb;;AAEN,aACE;AACG,gBAAQ,CADX;AAEG,eAAOA,KAFV;AAGG,mBAAWD;AAHd,QADF;AAOD;;;;EA/C2BR,S;;kBAkDfC,e","file":"ProgressLoading.js","sourcesContent":["//import React, { Component } from 'react';\r\nimport React from '../_react'\r\n\r\nimport { FETCH } from '../../flux/fetching/constants';\r\nimport ProgressLine from '../zhn-atoms/ProgressLine';\r\n\r\nconst Colors = {\r\n  LOADING : '#2F7ED8',\r\n  FAILED : 'rgb(237, 88, 19)'\r\n};\r\n\r\nconst { Component } = React\r\n\r\nclass ProgressLoading extends Component {\r\n\r\n  constructor(props){\r\n    super();\r\n    this.fetching = props.store.getState().fetching\r\n    this.state = {\r\n      completed : 0,\r\n      color : Colors.LOADING\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store.subscribe(this._onStore);\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe();\r\n  }\r\n\r\n  _onStore = () => {\r\n    const { store } = this.props\r\n    const fetching = store.getState().fetching\r\n    if (this.fetching !== fetching){\r\n      this.fetching = fetching;\r\n      switch(fetching){\r\n        case FETCH.LOADING:\r\n          this.setState({ completed: 35, color: Colors.LOADING });\r\n          break;\r\n        case FETCH.SUCCESS:\r\n          this.setState({ completed: 100, color: Colors.LOADING });\r\n          break;\r\n        case FETCH.FAILED:\r\n          this.setState({completed: 100, color: Colors.FAILED})\r\n          break;\r\n        default : break;\r\n      }\r\n    }\r\n  }\r\n\r\n  render(){\r\n    const { completed, color } = this.state;\r\n    return (\r\n      <ProgressLine\r\n         height={3}\r\n         color={color}\r\n         completed={completed}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default ProgressLoading\r\n"]}