{"version":3,"sources":["../../../src/components/left-push-menu/HourlyChart.jsx"],"names":["Component","CartesianGrid","Line","YAxis","XAxis","ResponsiveContainer","Legend","LineChart","_data","day","temp","fnAdapter","obj","list","map","timestamp","item","dt","dt_txt","main","wind","rain","pressure","humidity","speed","_rain","toDayHour","dt_text","HourlyChart","state","data","filtered","_onStore","props","store","getState","recent","byId","setState","handleFilter","dataKey","prev","unsubsribe","subscribe","nextProps","YAxisPressure","YAxisRain","YAxisSpeed","LineTempNight","LinePressure","LineRain","LineSpeed"],"mappings":"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","file":"HourlyChart.js","sourcesContent":["//import React, { Component } from 'react';\r\nimport React from '../_react'\r\n\r\nimport Chart from '../charts/Chart'\r\n\r\nimport dt from '../../utils/dt';\r\nimport { sHourly } from '../../flux/selectors';\r\n\r\nimport LegendHourly from './LegendHourly';\r\nimport STYLE from './Chart.Style';\r\n\r\nconst { Component } = React\r\n\r\nconst {\r\n CartesianGrid,\r\n Line,\r\n YAxis,\r\n XAxis,\r\n ResponsiveContainer,\r\n Legend,\r\n LineChart\r\n} = Chart;\r\n\r\n\r\nconst _data = [\r\n      {day: 'Page A', temp: 40 },\r\n      {day: 'Page B', temp: 30 },\r\n      {day: 'Page C', temp: 20 },\r\n      {day: 'Page D', temp: 27 },\r\n      {day: 'Page E', temp: 18 },\r\n      {day: 'Page F', temp: 23 },\r\n      {day: 'Page G', temp: 34 }\r\n];\r\n\r\nconst fnAdapter = ( obj ) => {\r\n  return obj.list.map(item => {\r\n    const {\r\n       dt:timestamp, dt_txt='',\r\n       main={}, wind={}, rain={}\r\n     } = item\r\n    , { temp, pressure, humidity } = main\r\n    , { speed=null } = wind\r\n    , _rain  = rain['3h'] || null\r\n    return {\r\n      //day : dt.toShortDayOfWeek(timestamp),\r\n      day : dt.toDayHour(timestamp),\r\n      dt_text : dt_txt,\r\n      temp : temp,\r\n      pressure : pressure,\r\n      humidity : humidity,\r\n      speed : speed,\r\n      rain : _rain\r\n    }\r\n  })\r\n}\r\n\r\nclass HourlyChart extends Component {\r\n  state = {\r\n    data : _data,\r\n    filtered : {\r\n      temp : false,\r\n      pressure : true,\r\n      rain : true,\r\n      speed : true\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubsribe = this.props.store.subscribe(this._onStore)\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubsribe()\r\n  }\r\n  _onStore = () => {\r\n    const state = this.props.store.getState();\r\n    const recent = sHourly.recent(state)\r\n    if (recent !== this.recent){\r\n      this.recent = recent\r\n      const data = fnAdapter(sHourly.byId(state, recent))\r\n      this.setState({ data })\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps){\r\n    if (this.props !== nextProps) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  handleFilter = (dataKey) => {\r\n    this.setState((prev) => {\r\n       const { filtered } = prev\r\n       filtered[dataKey] = !filtered[dataKey]\r\n       return { filtered }\r\n    })\r\n  }\r\n\r\n  render(){\r\n    const { data, filtered } = this.state\r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height={300} >\r\n\r\n      <LineChart data={data} {...STYLE.HourlyChart} >\r\n        <XAxis dataKey=\"day\" {...STYLE.XAxis} />\r\n\r\n        <YAxis\r\n           yAxisId={1}\r\n           orientation=\"right\"\r\n           width={45}\r\n           label=\"Â°C\"\r\n           dataKey=\"temp\"\r\n           hide={filtered.temp}\r\n        />\r\n        <YAxis\r\n           yAxisId={2}\r\n           orientation=\"right\"\r\n           width={80}\r\n           dataKey=\"pressure\"\r\n           type=\"number\"\r\n           domain={['dataMin', 'dataMax']}\r\n           label=\"hPa\"\r\n           hide={filtered.pressure}\r\n           {...STYLE.YAxisPressure}\r\n        />\r\n        <YAxis\r\n           yAxisId={3}\r\n           orientation=\"right\"\r\n           width={54}\r\n           label=\"mm\"\r\n           dataKey=\"rain\"\r\n           hide={filtered.rain}\r\n           {...STYLE.YAxisRain}\r\n        />\r\n        <YAxis\r\n          yAxisId={4}\r\n          orientation=\"right\"\r\n          width={45}\r\n          label=\"m/s\"\r\n          dataKey=\"speed\"\r\n          hide={filtered.speed}\r\n          {...STYLE.YAxisSpeed}\r\n        />\r\n\r\n        <CartesianGrid {...STYLE.CartesianGrid} />\r\n        <Legend\r\n           content={\r\n               <LegendHourly\r\n                   filtered={filtered}\r\n                   onFilter={this.handleFilter}\r\n               />\r\n            }\r\n        />\r\n\r\n        <Line {...STYLE.LineTempNight}\r\n            connectNulls={true}\r\n            yAxisId={1}\r\n            dataKey={(filtered.temp) ? \"empty\" : \"temp\"}\r\n        />\r\n        <Line {...STYLE.LinePressure}\r\n            connectNulls={true}\r\n            strokeDasharray=\"5 5\"\r\n            yAxisId={2}\r\n            dataKey={(filtered.pressure) ? \"empty\" : \"pressure\"}\r\n        />\r\n        <Line {...STYLE.LineRain}\r\n            connectNulls={true}\r\n            strokeDasharray=\"5 5\"\r\n            //strokeDasharray=\"100 5\"\r\n            yAxisId={3}\r\n            dataKey={(filtered.rain) ? \"empty\" : \"rain\"}\r\n        />\r\n        <Line\r\n            connectNulls={true}\r\n            {...STYLE.LineSpeed}\r\n            strokeDasharray=\"5 5\"\r\n            //strokeDasharray={false}\r\n            yAxisId={4}\r\n            dataKey={(filtered.speed) ? \"empty\" : \"speed\"}\r\n        />\r\n\r\n      </LineChart>\r\n\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HourlyChart\r\n"]}