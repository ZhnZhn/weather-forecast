{"version":3,"sources":["../../../src/components/dialogs/RowCheckBox.jsx"],"names":["Component","React","STYLE","ROOT","paddingTop","paddingLeft","CAPTION","display","color","fontSize","fontWeight","userSelect","cursor","CHECKED","RowCheckBox","props","_handleCheck","onCheck","setState","isChecked","_handleUnCheck","onUnCheck","_handleToggle","state","initValue","render","rootStyle","caption","captionStyle","_style"],"mappings":";;;;;;;;;;;AAEA;;AAEA;;AAJA;AACA;IAKQA,S,GAAcC,iB,CAAdD,S;AAER,IAAME,KAAK,GAAG;AACZC,EAAAA,IAAI,EAAG;AACLC,IAAAA,UAAU,EAAE,KADP;AAELC,IAAAA,WAAW,EAAE;AAFR,GADK;AAKZC,EAAAA,OAAO,EAAG;AACRC,IAAAA,OAAO,EAAE,cADD;AAERC,IAAAA,KAAK,EAAE,MAFC;AAGRH,IAAAA,WAAW,EAAE,MAHL;AAIRI,IAAAA,QAAQ,EAAE,MAJF;AAKRC,IAAAA,UAAU,EAAE,MALJ;AAMRC,IAAAA,UAAU,EAAE,MANJ;AAORC,IAAAA,MAAM,EAAE;AAPA,GALE;AAcZC,EAAAA,OAAO,EAAG;AACRL,IAAAA,KAAK,EAAE;AADC;AAdE,CAAd;;IAmBMM,W;;;;;AACJ;;;;;;;;;AAUA,uBAAYC,KAAZ,EAAkB;AAAA;;AAChB;;AADgB,UAOlBC,YAPkB,GAOH,YAAM;AAAA,UACXC,OADW,GACC,MAAKF,KADN,CACXE,OADW;;AAEnB,UAAI,OAAOA,OAAP,IAAkB,UAAtB,EAAiC;AAC/BA,QAAAA,OAAO;AACR;;AACD,YAAKC,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAd;AACD,KAbiB;;AAAA,UAclBC,cAdkB,GAcD,YAAM;AAAA,UACbC,SADa,GACC,MAAKN,KADN,CACbM,SADa;;AAErB,UAAI,OAAOA,SAAP,IAAoB,UAAxB,EAAmC;AACjCA,QAAAA,SAAS;AACV;;AACD,YAAKH,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAd;AACD,KApBiB;;AAAA,UAqBlBG,aArBkB,GAqBF,YAAM;AAAA,UACZH,SADY,GACE,MAAKI,KADP,CACZJ,SADY;;AAEpB,UAAIA,SAAJ,EAAe;AACb,cAAKC,cAAL;AACD,OAFD,MAEO;AACL,cAAKJ,YAAL;AACD;AACF,KA5BiB;;AAEhB,UAAKO,KAAL,GAAa;AACXJ,MAAAA,SAAS,EAAE,CAAC,CAACJ,KAAK,CAACS;AADR,KAAb;AAFgB;AAKjB;;;;SAyBDC,M,GAAA,kBAAQ;AAAA,sBAII,KAAKV,KAJT;AAAA,QAECW,SAFD,eAECA,SAFD;AAAA,QAGCC,OAHD,eAGCA,OAHD;AAAA,QAGUC,YAHV,eAGUA,YAHV;AAAA,QAKET,SALF,GAKgB,KAAKI,KALrB,CAKEJ,SALF;AAAA,QAMAU,MANA,GAMSV,SAAS,GACbjB,KAAK,CAACW,OADO,GAEb,IARL;;AASN,WACE;AAAK,MAAA,KAAK,gCAAMX,KAAK,CAACC,IAAZ,MAAqBuB,SAArB;AAAV,OACE,gCAAC,uBAAD;AACE,MAAA,KAAK,EAAEP,SADT;AAEE,MAAA,OAAO,EAAE,KAAKH,YAFhB;AAGE,MAAA,SAAS,EAAE,KAAKI;AAHlB,MADF,EAOIO,OAAO,IACL;AACE,MAAA,KAAK,gCAAMzB,KAAK,CAACI,OAAZ,MAAwBsB,YAAxB,MAAyCC,MAAzC,CADP;AAEE,MAAA,OAAO,EAAE,KAAKP;AAFhB,OAIGK,OAJH,CARN,CADF;AAmBD,G;;;EArEuB3B,S;;eAwEXc,W","sourcesContent":["//import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\nimport React from '../_react'\r\n\r\nimport SvgCheckBox from '../zhn-atoms/SvgCheckBox'\r\n\r\nconst { Component } = React\r\n\r\nconst STYLE = {\r\n  ROOT : {\r\n    paddingTop: '6px',\r\n    paddingLeft: '16px'\r\n  },\r\n  CAPTION : {\r\n    display: 'inline-block',\r\n    color: 'grey',\r\n    paddingLeft: '12px',\r\n    fontSize: '16px',\r\n    fontWeight: 'bold',\r\n    userSelect: 'none',\r\n    cursor: 'pointer'\r\n  },\r\n  CHECKED : {\r\n    color: 'black'\r\n  }\r\n}\r\n\r\nclass RowCheckBox extends Component {\r\n  /*\r\n  static propTypes = {\r\n    rootStyle : PropTypes.object,\r\n    caption: PropTypes.string,\r\n    initValue: PropTypes.bool,\r\n    onCheck: PropTypes.func,\r\n    onUnCheck: PropTypes.func\r\n  }\r\n  */\r\n\r\n  constructor(props){\r\n    super()\r\n    this.state = {\r\n      isChecked: !!props.initValue\r\n    }\r\n  }\r\n\r\n  _handleCheck = () => {\r\n    const { onCheck } = this.props;\r\n    if (typeof onCheck == 'function'){\r\n      onCheck()\r\n    }\r\n    this.setState({ isChecked: true })\r\n  }\r\n  _handleUnCheck = () => {\r\n    const { onUnCheck } = this.props;\r\n    if (typeof onUnCheck == 'function'){\r\n      onUnCheck()\r\n    }\r\n    this.setState({ isChecked: false })\r\n  }\r\n  _handleToggle = () => {\r\n    const { isChecked } = this.state;\r\n    if (isChecked) {\r\n      this._handleUnCheck()\r\n    } else {\r\n      this._handleCheck()\r\n    }\r\n  }\r\n\r\n  render(){\r\n    const {\r\n           rootStyle,\r\n           caption, captionStyle\r\n          } = this.props\r\n        , { isChecked } = this.state\r\n        , _style = isChecked\r\n             ? STYLE.CHECKED\r\n             : null;\r\n    return (\r\n      <div style={{...STYLE.ROOT, ...rootStyle}}>\r\n        <SvgCheckBox\r\n          value={isChecked}\r\n          onCheck={this._handleCheck}\r\n          onUnCheck={this._handleUnCheck}\r\n        />\r\n        {\r\n          caption && (\r\n            <span\r\n              style={{...STYLE.CAPTION, ...captionStyle, ..._style }}\r\n              onClick={this._handleToggle}\r\n            >\r\n              {caption}\r\n            </span>\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RowCheckBox\r\n"],"file":"RowCheckBox.js"}